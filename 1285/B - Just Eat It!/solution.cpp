#include<bits/stdc++.h>using namespace std;typedef long long ll;void f(ll n,vector<ll>&a){    for(ll i=0;i<n;i++)cin>>a[i];} void solve(){    ll n;    cin>>n;    vector<ll>arr(n);    f(n,arr);    ll sum=accumulate(begin(arr),end(arr),0ll);    // i have to find the subarray of size less than n with total sum exceeding SUM    unordered_map<ll,ll>mpL,mpR;    vector<ll>prefL(n),prefR(n);        for (ll i = 0; i < n; i++)    {        if(i==0)prefL[i]=arr[i];        else prefL[i]=prefL[i-1]+arr[i];        if(n-i-1==n-1)prefR[0]=arr[n-i-1];        else prefR[i]=arr[n-i-1]+prefR[i-1];    }    for (ll i = 0; i < n-1; i++)    {        if((prefL[i]>=sum || mpL.find(prefL[i]-sum)!=mpL.end()) ||           prefR[i]>=sum || mpR.find(prefR[i]-sum)!=mpR.end()){            cout<<"NO"<<'\n';            return;        }        mpL[prefL[i]]++;        mpR[prefR[i]]++;    }       // FOR LAST ELEMENT     cout<<"YES"<<'\n';    return;        } int main(){ll t;cin>>t;while (t--){    solve();}     return 0;}