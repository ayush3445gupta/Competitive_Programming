#include<bits/stdc++.h>using namespace std;typedef long long ll;void solve(){    ll n;    cin>>n;    vector<ll>par(n+1);    vector<bool>leaves(n+1,true),vis(n+1,false);    ll root=-1;    for (ll i = 1; i <=n; i++)    {        ll a;        cin>>a;        par[i]=a;        leaves[a]=false;        if(a==i)root=a;    }    if(n==1){        cout<<1<<'\n';        cout<<1<<'\n';        cout<<par[1]<<'\n';        cout<<'\n';        return;    }    // now we get leaf nodes then we can traverse from leaf to top and store the path    vector<vector<ll>>ans;    for(ll i=1;i<=n;i++){        if(leaves[i]==true){            vector<ll>paths;            ll j=i;            while (par[j]!=j && !vis[j])            {                vis[j]=true;                paths.push_back(j);                j=par[j];            }            if(!vis[j]){                vis[j]=true;                paths.push_back(j);                           }            reverse(begin(paths),end(paths));            ans.push_back(paths);        }    }cout<<ans.size()<<'\n';for(auto& it:ans){    cout<<it.size()<<'\n';    for(auto k:it)cout<<k<<" ";    cout<<'\n';}cout<<'\n';} int main(){ll t;cin>>t;while (t--){    solve();}     return 0;}